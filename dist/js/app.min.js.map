{"version":3,"sources":["app.js"],"names":["allFeeds","name","url","init","loadFeed","id","cb","feedUrl","feedName","$","ajax","type","data","JSON","stringify","contentType","success","result","container","title","entries","feed","entryTemplate","Handlebars","compile","html","empty","forEach","entry","append","error","dataType","google","setOnLoadCallback","feedList","feedItemTemplate","feedId","menuIcon","on","item","this","addClass","toggleClass"],"mappings":"AAYA,IAAIA,SAAW,CACX,CACIC,KAAM,eACNC,IAAK,gCACN,CACCD,KAAM,aACNC,IAAK,yCACN,CACCD,KAAM,cACNC,IAAK,0CACN,CACCD,KAAM,qBACNC,IAAK,2DAQb,SAASC,OAELC,SAAS,GAWb,SAASA,SAASC,EAAIC,GAClB,IAAIC,EAAUP,SAASK,GAAIH,IACvBM,EAAWR,SAASK,GAAIJ,KAE5BQ,EAAEC,KAAK,CACHC,KAAM,OACNT,IAAK,0CACLU,KAAMC,KAAKC,UAAU,CAACZ,IAAKK,IAC3BQ,YAAY,mBACZC,QAAS,SAAUC,GACf,IAAIC,EAAYT,EAAE,SACdU,EAAQV,EAAE,iBACVW,EAAUH,EAAOI,KAAKD,QACtBE,EAAgBC,WAAWC,QAAQf,EAAE,cAAcgB,QAEvDN,EAAMM,KAAKjB,GACXU,EAAUQ,QAOVN,EAAQO,QAAQ,SAASC,GACrBV,EAAUW,OAAOP,EAAcM,MAG/BtB,GACAA,KAGRwB,MAAO,WAECxB,GACAA,KAGRyB,SAAU,SAOlBC,OAAOC,kBAAkB9B,MAMzBM,EAAE,WAEE,IAAIyB,EAAWzB,EAAE,cACb0B,EAAmBZ,WAAWC,QAAQf,EAAE,uBAAuBgB,QAC/DW,EAAS,EACTC,EAAW5B,EAAE,mBAQjBT,SAAS2B,QAAQ,SAASN,GACtBA,EAAKhB,GAAK+B,EACVF,EAASL,OAAOM,EAAiBd,IAEjCe,MAOJF,EAASI,GAAG,QAAS,IAAK,WACtB,IAAIC,EAAO9B,EAAE+B,MAIb,OAFA/B,EAAE,QAAQgC,SAAS,eACnBrC,SAASmC,EAAK3B,KAAK,QACZ,IAMXyB,EAASC,GAAG,QAAS,WACjB7B,EAAE,QAAQiC,YAAY,iBApC5B","file":"app.min.js","sourcesContent":["/* eslint-env jquery */\n/* global google, Handlebars */\n\n/* app.js\n *\n * This is our RSS feed reader application. It uses the Google\n * Feed Reader API to grab RSS feeds as JSON object we can make\n * use of. It also uses the Handlebars templating library and\n * jQuery.\n */\n\n// The names and URLs to all of the feeds we'd like available.\nvar allFeeds = [\n    {\n        name: 'Udacity Blog',\n        url: 'http://blog.udacity.com/feed'\n    }, {\n        name: 'CSS Tricks',\n        url: 'http://feeds.feedburner.com/CssTricks'\n    }, {\n        name: 'HTML5 Rocks',\n        url: 'http://feeds.feedburner.com/html5rocks'\n    }, {\n        name: 'Linear Digressions',\n        url: 'http://feeds.feedburner.com/udacity-linear-digressions'\n    }\n];\n\n/* This function starts up our application. The Google Feed\n * Reader API is loaded asynchonously and will then call this\n * function when the API is loaded.\n */\nfunction init() {\n    // Load the first feed we've defined (index of 0).\n    loadFeed(0);\n}\n\n/* This function performs everything necessary to load a\n * feed using the Google Feed Reader API. It will then\n * perform all of the DOM operations required to display\n * feed entries on the page. Feeds are referenced by their\n * index position within the allFeeds array.\n * This function all supports a callback as the second parameter\n * which will be called after everything has run successfully.\n */\nfunction loadFeed(id, cb) {\n    var feedUrl = allFeeds[id].url,\n        feedName = allFeeds[id].name;\n\n    $.ajax({\n        type: 'POST',\n        url: 'https://rsstojson.udacity.com/parseFeed',\n        data: JSON.stringify({url: feedUrl}),\n        contentType:'application/json',\n        success: function (result){\n            var container = $('.feed'),\n                title = $('.header-title'),\n                entries = result.feed.entries,\n                entryTemplate = Handlebars.compile($('.tpl-entry').html());\n\n            title.html(feedName);   // Set the header text\n            container.empty();      // Empty out all previous entries\n\n            /* Loop through the entries we just loaded via the Google\n            * Feed Reader API. We'll then parse that entry against the\n            * entryTemplate (created above using Handlebars) and append\n            * the resulting HTML to the list of entries on the page.\n            */\n            entries.forEach(function(entry) {\n                container.append(entryTemplate(entry));\n            });\n\n            if (cb) {\n                cb();\n            }\n        },\n        error: function (){\n            //run only the callback without attempting to parse result due to error\n            if (cb) {\n                cb();\n            }\n        },\n        dataType: 'json'\n    });\n}\n\n/* Google API: Loads the Feed Reader API and defines what function\n * to call when the Feed Reader API is done loading.\n */\ngoogle.setOnLoadCallback(init);\n\n/* All of this functionality is heavily reliant upon the DOM, so we\n * place our code in the $() function to ensure it doesn't execute\n * until the DOM is ready.\n */\n$(function() {\n    // var container = $('.feed'),\n    var feedList = $('.feed-list'),\n        feedItemTemplate = Handlebars.compile($('.tpl-feed-list-item').html()),\n        feedId = 0,\n        menuIcon = $('.menu-icon-link');\n\n    /* Loop through all of our feeds, assigning an id property to\n     * each of the feeds based upon its index within the array.\n     * Then parse that feed against the feedItemTemplate (created\n     * above using Handlebars) and append it to the list of all\n     * available feeds within the menu.\n     */\n    allFeeds.forEach(function(feed) {\n        feed.id = feedId;\n        feedList.append(feedItemTemplate(feed));\n\n        feedId++;\n    });\n\n    /* When a link in our feedList is clicked on, we want to hide\n     * the menu, load the feed, and prevent the default action\n     * (following the link) from occurring.\n     */\n    feedList.on('click', 'a', function() {\n        var item = $(this);\n\n        $('body').addClass('menu-hidden');\n        loadFeed(item.data('id'));\n        return false;\n    });\n\n    /* When the menu icon is clicked on, we need to toggle a class\n     * on the body to perform the hiding/showing of our menu.\n     */\n    menuIcon.on('click', function() {\n        $('body').toggleClass('menu-hidden');\n    });\n}());\n "]}